{"pageProps":{"postContent":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Raycast","position":{"start":{"line":11,"column":4,"offset":205},"end":{"line":11,"column":11,"offset":212}}}]},{"type":"paragraph","children":[{"type":"text","value":"在使用滑鼠的 3D 遊戲中，幾乎與任何物件互動都需要使用滑鼠，判斷玩家游標的位置自然是非常重要且基礎的技術。然而相對 3D 世界的三維座標，存在於螢幕上的游標只有二維座標的 X 軸與 Y 軸兩個數據代表位置，這使得在遊戲世界中精準定位游標位置變得困難。","position":{"start":{"line":13,"column":1,"offset":214},"end":{"line":13,"column":127,"offset":340}}}]},{"type":"paragraph","children":[{"type":"text","value":"不過，大多數想要在遊戲中取得游標位置時，都是為了與存在該位置的物件互動。這個物件就能成為定位游標的輔助工具，只要計算從玩家視角中的游標，是否真正與遊戲世界中的該物件重合即可。","position":{"start":{"line":15,"column":1,"offset":342},"end":{"line":15,"column":88,"offset":429}}}]},{"type":"paragraph","children":[{"type":"text","value":"具體來說，這個判斷方式是從攝影機朝向滑鼠的二維座標射出一道直線，並判斷該射線所相交的物件。","position":{"start":{"line":17,"column":1,"offset":431},"end":{"line":17,"column":46,"offset":476}}}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"Plane.Raycast","position":{"start":{"line":19,"column":5,"offset":482},"end":{"line":19,"column":18,"offset":495}}}]},{"type":"paragraph","children":[{"type":"text","value":"先從這個技術的最基本實作，也就是判斷滑鼠在純平面上的座標開始。","position":{"start":{"line":21,"column":1,"offset":497},"end":{"line":21,"column":32,"offset":528}}}]},{"type":"code","lang":"csharp","meta":null,"value":"using UnityEngine;\n\npublic class GetMousePos : MonoBehaviour {\n    Plane plane = new Plane (Vector3.up, 0);\n    Camera camera;\n    Vector3 mousePos;\n\n    void Start () {\n        camera = Camera.main; \n    }\n\n    void Update () {\n        float distance;\n        Ray ray = camera.ScreenPointToRay(Input.mousePosition);\n        if(plane.Raycast(ray, out distance)){\n            mousePos = ray.GetPoint(distance);\n        }\n    }\n}"},{"type":"paragraph","children":[{"type":"text","value":"一行一行解讀：","position":{"start":{"line":45,"column":1,"offset":973},"end":{"line":45,"column":8,"offset":980}}}]},{"type":"code","lang":"csharp","meta":null,"value":"Plane plane = new Plane (Vector3.up, 0);"},{"type":"paragraph","children":[{"type":"text","value":"從官方文件 ","position":{"start":{"line":51,"column":1,"offset":1038},"end":{"line":51,"column":7,"offset":1044}}},{"type":"link","title":null,"url":"https://docs.unity3d.com/ScriptReference/Plane-ctor.html","children":[{"type":"text","value":"https://docs.unity3d.com/ScriptReference/Plane-ctor.html","position":{"start":{"line":51,"column":8,"offset":1045},"end":{"line":51,"column":64,"offset":1101}}}],"position":{"start":{"line":51,"column":7,"offset":1044},"end":{"line":51,"column":123,"offset":1160}}},{"type":"text","value":" 可以查到 Plane 的 constructor 是長這樣： ","position":{"start":{"line":51,"column":123,"offset":1160},"end":{"line":51,"column":155,"offset":1192}}},{"type":"inlineCode","value":"Plane (Vector3 inNormal, float distance)","position":{"start":{"line":51,"column":155,"offset":1192},"end":{"line":51,"column":197,"offset":1234}}},{"type":"text","value":" 。","position":{"start":{"line":51,"column":197,"offset":1234},"end":{"line":51,"column":199,"offset":1236}}}]},{"type":"paragraph","children":[{"type":"text","value":"以三維座標 (0, 0, 0) 為基準點，基於法線方向 ","position":{"start":{"line":53,"column":1,"offset":1238},"end":{"line":53,"column":29,"offset":1266}}},{"type":"inlineCode","value":"inNormal","position":{"start":{"line":53,"column":29,"offset":1266},"end":{"line":53,"column":39,"offset":1276}}},{"type":"text","value":" 在距離基準點 ","position":{"start":{"line":53,"column":39,"offset":1276},"end":{"line":53,"column":47,"offset":1284}}},{"type":"inlineCode","value":"distance","position":{"start":{"line":53,"column":47,"offset":1284},"end":{"line":53,"column":57,"offset":1294}}},{"type":"text","value":" 的位置創造一個平面。 ","position":{"start":{"line":53,"column":57,"offset":1294},"end":{"line":53,"column":69,"offset":1306}}},{"type":"inlineCode","value":"Vector3.up","position":{"start":{"line":53,"column":69,"offset":1306},"end":{"line":53,"column":81,"offset":1318}}},{"type":"text","value":" 就等於 ","position":{"start":{"line":53,"column":81,"offset":1318},"end":{"line":53,"column":86,"offset":1323}}},{"type":"inlineCode","value":"Vector3 (0, 1, 0)","position":{"start":{"line":53,"column":86,"offset":1323},"end":{"line":53,"column":105,"offset":1342}}},{"type":"text","value":" ，也就是筆直朝向 Y軸上方的向量。這個 plane 不會顯示在遊戲中，如果想要用視覺理解 plane 的概念，可以直接在 Editor 中新增一個 rotation 與 position 都為 (0, 0, 0) 的 Plane，這兩個平面基本上相同。","position":{"start":{"line":53,"column":105,"offset":1342},"end":{"line":53,"column":232,"offset":1469}}}]},{"type":"code","lang":"csharp","meta":null,"value":"   Camera camera;\n   Vector3 mousePos;\n   void Start () {\n       camera = Camera.main; \n   }"},{"type":"paragraph","children":[{"type":"text","value":"將目前使用的主攝影機存為變數，並預先設立儲存滑鼠位置用的變數。","position":{"start":{"line":63,"column":1,"offset":1579},"end":{"line":63,"column":32,"offset":1610}}}]},{"type":"code","lang":"csharp","meta":null,"value":"void Update () {\n    float distance;\n    Ray ray = camera.ScreenPointToRay(Input.mousePosition);\n    ..."},{"type":"paragraph","children":[{"type":"text","value":"在每次更新時，創建一個空的距離變數 ","position":{"start":{"line":72,"column":1,"offset":1732},"end":{"line":72,"column":19,"offset":1750}}},{"type":"inlineCode","value":"distance","position":{"start":{"line":72,"column":19,"offset":1750},"end":{"line":72,"column":29,"offset":1760}}},{"type":"text","value":" ，以及一個射線變數 ","position":{"start":{"line":72,"column":29,"offset":1760},"end":{"line":72,"column":40,"offset":1771}}},{"type":"inlineCode","value":"ray","position":{"start":{"line":72,"column":40,"offset":1771},"end":{"line":72,"column":45,"offset":1776}}},{"type":"text","value":" ，起點為攝影機的 near clipping plane，方向為滑鼠位置。","position":{"start":{"line":72,"column":45,"offset":1776},"end":{"line":72,"column":83,"offset":1814}}}]},{"type":"paragraph","children":[{"type":"text","value":"攝影機的顯示範圍是一個上窄下寬的梯形，頂部距離攝影機較近且面積較小的平面就是 near clipping plane，底部較遠較大的平面就是 far clipping plane。玩家所謂的遊戲視窗大小基本上就等於 near clipping plane， ","position":{"start":{"line":74,"column":1,"offset":1816},"end":{"line":74,"column":130,"offset":1945}}},{"type":"inlineCode","value":"Camera.ScreenPointToRay","position":{"start":{"line":74,"column":130,"offset":1945},"end":{"line":74,"column":155,"offset":1970}}},{"type":"text","value":" 也就是從 near clipping plane 射向 far clipping plane。","position":{"start":{"line":74,"column":155,"offset":1970},"end":{"line":74,"column":203,"offset":2018}}}]},{"type":"paragraph","children":[{"type":"image","title":"","url":"unity-dev-memo-1_1.png","alt":"TODO"}]},{"type":"paragraph","children":[{"type":"text","value":"這兩個數值都可以從 camera 的 inspector 調整。","position":{"start":{"line":78,"column":1,"offset":2049},"end":{"line":78,"column":33,"offset":2081}}}]},{"type":"paragraph","children":[{"type":"image","title":"","url":"unity-dev-memo-1_2.png","alt":"TODO"}]},{"type":"code","lang":"csharp","meta":null,"value":"\t\t... \n\t\tif(plane.Raycast(ray, out distance)){\n        mousePos = ray.GetPoint(distance);\n    }\n}"},{"type":"paragraph","children":[{"type":"text","value":"回到程式碼， ","position":{"start":{"line":90,"column":1,"offset":2225},"end":{"line":90,"column":8,"offset":2232}}},{"type":"inlineCode","value":"plane.Raycast","position":{"start":{"line":90,"column":8,"offset":2232},"end":{"line":90,"column":23,"offset":2247}}},{"type":"text","value":" 中的 ","position":{"start":{"line":90,"column":23,"offset":2247},"end":{"line":90,"column":27,"offset":2251}}},{"type":"inlineCode","value":"out","position":{"start":{"line":90,"column":27,"offset":2251},"end":{"line":90,"column":32,"offset":2256}}},{"type":"text","value":" 是另一個值得注意的地方。先看 ","position":{"start":{"line":90,"column":32,"offset":2256},"end":{"line":90,"column":48,"offset":2272}}},{"type":"inlineCode","value":"plane.Raycast","position":{"start":{"line":90,"column":48,"offset":2272},"end":{"line":90,"column":63,"offset":2287}}},{"type":"text","value":" 函數本身：","position":{"start":{"line":90,"column":63,"offset":2287},"end":{"line":90,"column":69,"offset":2293}}}]},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.unity3d.com/ScriptReference/Plane.Raycast.html","children":[{"type":"text","value":"https://docs.unity3d.com/ScriptReference/Plane.Raycast.html","position":{"start":{"line":92,"column":2,"offset":2296},"end":{"line":92,"column":61,"offset":2355}}}],"position":{"start":{"line":92,"column":1,"offset":2295},"end":{"line":92,"column":123,"offset":2417}}}]},{"type":"paragraph","children":[{"type":"text","value":"這個函數的型別是 bool ，回傳引數 ray 是否與該 plane 相交。然而，部分函數提供額外的回傳值，取得值時必須提供一個空變數與 ","position":{"start":{"line":94,"column":1,"offset":2419},"end":{"line":94,"column":70,"offset":2488}}},{"type":"inlineCode","value":"out","position":{"start":{"line":94,"column":70,"offset":2488},"end":{"line":94,"column":75,"offset":2493}}},{"type":"text","value":" 關鍵字一起作為引數輸入。 ","position":{"start":{"line":94,"column":75,"offset":2493},"end":{"line":94,"column":89,"offset":2507}}},{"type":"inlineCode","value":"plane.Raycast","position":{"start":{"line":94,"column":89,"offset":2507},"end":{"line":94,"column":104,"offset":2522}}},{"type":"text","value":" 就是有提供 ","position":{"start":{"line":94,"column":104,"offset":2522},"end":{"line":94,"column":111,"offset":2529}}},{"type":"inlineCode","value":"out","position":{"start":{"line":94,"column":111,"offset":2529},"end":{"line":94,"column":116,"offset":2534}}},{"type":"text","value":" 回傳值的函數之一，提供的是當相交發生時從 ray 起點至相交點的距離 ","position":{"start":{"line":94,"column":116,"offset":2534},"end":{"line":94,"column":152,"offset":2570}}},{"type":"inlineCode","value":"distance","position":{"start":{"line":94,"column":152,"offset":2570},"end":{"line":94,"column":162,"offset":2580}}},{"type":"text","value":" 。因此這一段程式碼的作用是，判斷平面 plane 與 ray 是否有相交發生，如果有的話將距離儲存進 distance。現在射線起點，相交距離都知道了，就能計算出滑鼠位置便是從該射線上從起點開始距離 distance 的地方。","position":{"start":{"line":94,"column":162,"offset":2580},"end":{"line":94,"column":276,"offset":2694}}}]},{"type":"paragraph","children":[{"type":"image","title":"","url":"unity-dev-memo-2_3.gif","alt":"TODO"}]},{"type":"paragraph","children":[{"type":"text","value":"以上就是在射線上增加元素使其可視化之後的展示，紅色點是射線起點 (","position":{"start":{"line":98,"column":1,"offset":2725},"end":{"line":98,"column":34,"offset":2758}}},{"type":"inlineCode","value":"ray.GetPoint(0)","position":{"start":{"line":98,"column":34,"offset":2758},"end":{"line":98,"column":51,"offset":2775}}},{"type":"text","value":" )，藍色點是與平面相交點（ ","position":{"start":{"line":98,"column":51,"offset":2775},"end":{"line":98,"column":66,"offset":2790}}},{"type":"inlineCode","value":"ray.GetPoint(distance)","position":{"start":{"line":98,"column":66,"offset":2790},"end":{"line":98,"column":90,"offset":2814}}},{"type":"text","value":" ）。可以看見起點不是攝影機本身，而是在 near clipping plane 上。","position":{"start":{"line":98,"column":90,"offset":2814},"end":{"line":98,"column":133,"offset":2857}}}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"Collider.Raycast","position":{"start":{"line":100,"column":5,"offset":2863},"end":{"line":100,"column":21,"offset":2879}}}]},{"type":"paragraph","children":[{"type":"text","value":"以上都是純平面的情況，實際在遊戲中常常有地形非單純平面的情況，此時可以使用 ","position":{"start":{"line":102,"column":1,"offset":2881},"end":{"line":102,"column":39,"offset":2919}}},{"type":"inlineCode","value":"TerrainCollider","position":{"start":{"line":102,"column":39,"offset":2919},"end":{"line":102,"column":56,"offset":2936}}},{"type":"text","value":" 來計算射線與地形 terrain 的相交點。","position":{"start":{"line":102,"column":56,"offset":2936},"end":{"line":102,"column":79,"offset":2959}}}]},{"type":"code","lang":"csharp","meta":null,"value":"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class GetMousePos : MonoBehaviour {\n    TerrainCollider terrainCollider;\n    Camera camera;\n    Vector3 mousePos;\n\n    void Start () {\n        camera = Camera.main;        \n        terrainCollider = Terrain.activeTerrain.GetComponent<TerrainCollider>();\n    }\n\n    void Update () {\n        Ray ray = camera.ScreenPointToRay(Input.mousePosition);\n        RaycastHit hitData;\n        if(terrainCollider.Raycast(ray, out hitData, 1000)){\n            mousePos = hitData.point;\n        }\n    }\n}"},{"type":"paragraph","children":[{"type":"text","value":"內容大致相同，只是這次判斷相交點的元素不是平面，而是地形碰撞體 ","position":{"start":{"line":129,"column":1,"offset":3554},"end":{"line":129,"column":33,"offset":3586}}},{"type":"inlineCode","value":"terrainCollider","position":{"start":{"line":129,"column":33,"offset":3586},"end":{"line":129,"column":50,"offset":3603}}},{"type":"text","value":" ，而這個函數所提供的 out 相交資料也更豐富，不只有距離，而是一整個資料形態 RaycastHit ","position":{"start":{"line":129,"column":50,"offset":3603},"end":{"line":129,"column":102,"offset":3655}}},{"type":"link","title":null,"url":"https://docs.unity3d.com/ScriptReference/RaycastHit.html","children":[{"type":"text","value":"https://docs.unity3d.com/ScriptReference/RaycastHit.html","position":{"start":{"line":129,"column":103,"offset":3656},"end":{"line":129,"column":159,"offset":3712}}}],"position":{"start":{"line":129,"column":102,"offset":3655},"end":{"line":129,"column":218,"offset":3771}}},{"type":"text","value":" ，包含 point, distance ,collider等，point 即為射線與 ","position":{"start":{"line":129,"column":218,"offset":3771},"end":{"line":129,"column":262,"offset":3815}}},{"type":"inlineCode","value":"terrainCollider","position":{"start":{"line":129,"column":262,"offset":3815},"end":{"line":129,"column":279,"offset":3832}}},{"type":"text","value":" 相交點。","position":{"start":{"line":129,"column":279,"offset":3832},"end":{"line":129,"column":284,"offset":3837}}}]},{"type":"paragraph","children":[{"type":"image","title":"","url":"unity-dev-memo-2_4.gif","alt":"TODO"}]},{"type":"paragraph","children":[{"type":"text","value":"上圖就是在不規則地形使用 ","position":{"start":{"line":133,"column":1,"offset":3868},"end":{"line":133,"column":14,"offset":3881}}},{"type":"inlineCode","value":"terrainCollider.Raycast","position":{"start":{"line":133,"column":14,"offset":3881},"end":{"line":133,"column":39,"offset":3906}}},{"type":"text","value":" 追蹤游標位置的展示，可以看見在右側遊戲畫面中游標移至山脈可見的南側時，左側的編輯器畫面也顯示游標位置的藍點直接跳過山脈北側，同時隨著地形一同起伏。","position":{"start":{"line":133,"column":39,"offset":3906},"end":{"line":133,"column":113,"offset":3980}}}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"Physics.Raycast","position":{"start":{"line":135,"column":5,"offset":3986},"end":{"line":135,"column":20,"offset":4001}}}]},{"type":"paragraph","children":[{"type":"text","value":"以上兩種實作的前提都是射線相交的對象為特定單一物件。想要判斷射線是否相交非特定物件時，使用 ","position":{"start":{"line":137,"column":1,"offset":4003},"end":{"line":137,"column":47,"offset":4049}}},{"type":"inlineCode","value":"Physics.Raycast","position":{"start":{"line":137,"column":47,"offset":4049},"end":{"line":137,"column":64,"offset":4066}}},{"type":"text","value":" 。這個函數會抓取引數的射線相交的第一個對象，且同樣提供 ","position":{"start":{"line":137,"column":64,"offset":4066},"end":{"line":137,"column":93,"offset":4095}}},{"type":"inlineCode","value":"out RaycastHit","position":{"start":{"line":137,"column":93,"offset":4095},"end":{"line":137,"column":109,"offset":4111}}},{"type":"text","value":" 資料。","position":{"start":{"line":137,"column":109,"offset":4111},"end":{"line":137,"column":113,"offset":4115}}}]},{"type":"code","lang":"csharp","meta":null,"value":"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class GetMousePos : MonoBehaviour {\n    Camera camera;\n    Vector3 mousePos;\n\n    void Start () {\n        camera = Camera.main;\n    }\n\n    void Update () {\n        Ray ray = camera.ScreenPointToRay(Input.mousePosition);\n        RaycastHit hitData;\n        if(Physics.Raycast(ray, out hitData, 1000)){\n            mousePos = hitData.point;\n\t\t\t\t\t\tGameObject hitObj = hitData.collider.transform.gameObject;\n        }\n    }\n}"},{"type":"paragraph","children":[{"type":"inlineCode","value":"Physics.Raycast","position":{"start":{"line":163,"column":1,"offset":4641},"end":{"line":163,"column":18,"offset":4658}}},{"type":"text","value":" 的提供距離引數做為判斷相交的最大距離，可以依照自己需求設定。","position":{"start":{"line":163,"column":18,"offset":4658},"end":{"line":163,"column":49,"offset":4689}}}]},{"type":"paragraph","children":[{"type":"image","title":"","url":"unity-dev-memo-2_5 1.gif","alt":"TODO"}]},{"type":"paragraph","children":[{"type":"text","value":"上圖為使用 ","position":{"start":{"line":167,"column":1,"offset":4722},"end":{"line":167,"column":7,"offset":4728}}},{"type":"inlineCode","value":"Physics.Raycast","position":{"start":{"line":167,"column":7,"offset":4728},"end":{"line":167,"column":24,"offset":4745}}},{"type":"text","value":" 追蹤游標互動物件的展示，使用 ","position":{"start":{"line":167,"column":24,"offset":4745},"end":{"line":167,"column":40,"offset":4761}}},{"type":"inlineCode","value":"RaycastHit.collider.transform.GameObject","position":{"start":{"line":167,"column":40,"offset":4761},"end":{"line":167,"column":82,"offset":4803}}},{"type":"text","value":" 判斷射線的碰撞體的原物件之後就可以進行互動。","position":{"start":{"line":167,"column":82,"offset":4803},"end":{"line":167,"column":105,"offset":4826}}}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"LayerMask in Physics.Raycast","position":{"start":{"line":169,"column":5,"offset":4832},"end":{"line":169,"column":33,"offset":4860}}}]},{"type":"paragraph","children":[{"type":"inlineCode","value":"Physics.Raycast","position":{"start":{"line":171,"column":1,"offset":4862},"end":{"line":171,"column":18,"offset":4879}}},{"type":"text","value":" 還提供圖層引數過濾判斷射線相交對象。","position":{"start":{"line":171,"column":18,"offset":4879},"end":{"line":171,"column":37,"offset":4898}}}]},{"type":"code","lang":"csharp","meta":null,"value":"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class HighlightRayOrigin : MonoBehaviour {\n    Camera camera;\n    Vector3 mousePos;\n    LayerMask layerMask = 1 << 8;\n\n    void Start () {\n        camera = Camera.main;\n    }\n\n    void Update () {\n        Ray ray = camera.ScreenPointToRay (Input.mousePosition);\n        RaycastHit hitData;\n        if (Physics.Raycast (ray, out hitData, 1000, layerMask)) {\n            mousePos = hitData.point;            \n\t\t\t\t\t\tGameObject hitObj = hitData.collider.transform.gameObject;\n        }\n    }\n}"},{"type":"paragraph","children":[{"type":"inlineCode","value":"Physics.Raycast","position":{"start":{"line":198,"column":1,"offset":5492},"end":{"line":198,"column":18,"offset":5509}}},{"type":"text","value":" 的 ","position":{"start":{"line":198,"column":18,"offset":5509},"end":{"line":198,"column":21,"offset":5512}}},{"type":"inlineCode","value":"layerMask","position":{"start":{"line":198,"column":21,"offset":5512},"end":{"line":198,"column":32,"offset":5523}}},{"type":"text","value":" 引數就是指定圖層，只有在這個圖層中的物件才會觸發與射線相交的判斷。","position":{"start":{"line":198,"column":32,"offset":5523},"end":{"line":198,"column":66,"offset":5557}}}]},{"type":"paragraph","children":[{"type":"text","value":"請注意，雖然這個引數的型別是 int，但其實是二進制的 int，所以直接輸入在編輯器中顯示的圖層編號是不會正常運作的，必須以 ","position":{"start":{"line":200,"column":1,"offset":5559},"end":{"line":200,"column":64,"offset":5622}}},{"type":"inlineCode","value":"<<","position":{"start":{"line":200,"column":64,"offset":5622},"end":{"line":200,"column":68,"offset":5626}}},{"type":"text","value":" 運算子將指定編號以二進制方式儲存在變數中再傳遞給 ","position":{"start":{"line":200,"column":68,"offset":5626},"end":{"line":200,"column":94,"offset":5652}}},{"type":"inlineCode","value":"Physics.Raycast","position":{"start":{"line":200,"column":94,"offset":5652},"end":{"line":200,"column":111,"offset":5669}}},{"type":"text","value":" 函數。","position":{"start":{"line":200,"column":111,"offset":5669},"end":{"line":200,"column":115,"offset":5673}}}]},{"type":"paragraph","children":[{"type":"image","title":"","url":"unity-dev-memo-2_6.gif","alt":"TODO"}]},{"type":"paragraph","children":[{"type":"text","value":"上圖是使用 LayerMask 過濾可互動物件的展示，只有上層物件位於可互動的圖層中，因此游標在地形或是下層物件時藍點都不會隨之移動。","position":{"start":{"line":204,"column":1,"offset":5704},"end":{"line":204,"column":68,"offset":5771}}}]}],"postSummary":{"id":"unity-dev-memo-2","title":"Unity Dev Memo (2)","category":"Game Development","language":["zh-TW"],"tags":["Unity3D"],"publishDate":"2020-10-04","pathname":"unity-dev-memo-2","zhTwLink":null,"filename":"Unity Dev Memo (2) (blog)"}},"__N_SSG":true}