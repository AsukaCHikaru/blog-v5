{"pageProps":{"postContent":[{"type":"paragraph","children":[{"type":"plain","text":"Don't use in-place swap."}]},{"type":"paragraph","children":[{"type":"plain","text":"Declare 2 new array "},{"type":"inlineCode","text":"left"},{"type":"plain","text":" and "},{"type":"inlineCode","text":"right"},{"type":"plain","text":" (or anything you want to call them). After comparing each element to pivot, push it to "},{"type":"inlineCode","text":"left"},{"type":"plain","text":" if it's smaller or "},{"type":"inlineCode","text":"right"},{"type":"plain","text":" if it's bigger than pivot. Then "},{"type":"inlineCode","text":"return [...quickSort(left), pivot, ...quickSort(right)]"},{"type":"plain","text":" will do the magic."}]},{"type":"paragraph","children":[{"type":"plain","text":"Of course it's not as good space efficiency-wise, but it's way easier to implement and understand."}]},{"type":"paragraph","children":[{"type":"plain","text":"Example code:"}]},{"type":"code","lang":"js","text":"function quickSort(arr){\n\tif(arr.length <= 1) return arr;\n\telse {\n\t\tlet pivot = arr.pop();\n\t\tlet len = arr.length;\n\t\tlet left = [];\n\t\tlet right = [];\n\t\tfor(let i = 0; i < len; i++){\n\t\t\tif(arr[i] >= pivot) right.push(arr[i]);\n\t\t\telse left.push(arr[i]);\n\t\t}\n\t\treturn [...quickSort(left), pivot, ...quickSort(right)];\n\t}\n}"}],"postSummary":{"id":"a-rather-easy-way-to-implement-quicksort-in-js","title":"A Rather Easy Way to Implement Quicksort in JavaScript","category":"JavaScript","language":["en-US"],"tags":["Algorithm"],"publishDate":"2019-05-23","pathname":"a-rather-easy-way-to-implement-quicksort-in-js","zhTwLink":null,"filename":"A rather easy way to implement quicksort in JavaScript (blog)"}},"__N_SSG":true}