{"pageProps":{"postContent":[{"type":"paragraph","children":[{"type":"plain","text":"One of the reasons I choose Gatsby last time I wrote my blog site is to have SSR. SEO matters, isn't it?"}]},{"type":"paragraph","children":[{"type":"plain","text":"I gained experience setting up SSR in my job, and this is how I apply that experience in my project."}]},{"type":"heading","children":[{"type":"plain","text":"The Idea"}],"depth":1},{"type":"paragraph","children":[{"type":"plain","text":"First, let's talk about React (and most of the MVVM frameworks) app without SSR. They are an HTML template with a js file. Everything about the app is in the js file; the HTML is merely a host for the app."}]},{"type":"paragraph","children":[{"type":"plain","text":"When the user's browser requests data of the app from the server, the HTML is provided. A blank HTML page with some metadata is rendered."}]},{"type":"paragraph","children":[{"type":"plain","text":"Then the HTML requests the data of the js file from the "},{"type":"inlineCode","text":"<script>"},{"type":"plain","text":" tag. The js file is fetched then executed. The logic inside starts working. Then the app is created and attached to a specific HTML element."}]},{"type":"paragraph","children":[{"type":"plain","text":"The problem is that search engines can't observe the actual app in the first render. Therefore, for the search engines, the app is always a blank page."}]},{"type":"paragraph","children":[{"type":"plain","text":"The solution is SSR -- server-side rendering. When the app is requested, the server runs the app, prints them into strings, then sends them with the HTML. For the browsers or the search engines, they get the whole app in the first render."}]},{"type":"heading","children":[{"type":"plain","text":"Dependencies"}],"depth":1},{"type":"list","ordered":false,"children":[{"type":"listItem","children":[{"type":"link","text":"express","url":"http://expressjs.com/"},{"type":"plain","text":" for handling requests and responses"}]}]},{"type":"heading","children":[{"type":"plain","text":"Setting up the server"}],"depth":1},{"type":"paragraph","children":[{"type":"plain","text":"Receive requests and send HTML. The HTML will be a string instead of a file for inserting stringified app."}]},{"type":"code","lang":"ts","text":"import * as Express from \"express\";\n\nconst APP_PORT = process.env.PORT || 3000;\nconst app = Express();\nconst renderer = () => {\n  app.get(\"*\", (req: Express.Request, res: Express.Response) => {\n    res.send(`\n\t\t\t<!DOCTYPE HTML>\n\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<!-- insert metadata here -->\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<div id=\"app-root\"></div>\n\t\t\t\t</body>\n\t\t\t</html>\n\t\t`);\n  });\n};\n\napp.use(renderer);\napp.listen(APP_PORT, () => {\n  console.log(`Server is listening on ${APP_PORT}`);\n});"},{"type":"heading","children":[{"type":"plain","text":"Library setups"}],"depth":1},{"type":"paragraph","children":[{"type":"plain","text":"I'm only using the major libraries for this app. Fortunately, some of them provide APIs for SSR setup. The common idea of libraries' SSR setup is getting the stringified part of each library from their API, then passing them into the HTML template."}]},{"type":"heading","children":[{"type":"plain","text":"React"}],"depth":2},{"type":"paragraph","children":[{"type":"link","text":"Document","url":"https://reactjs.org/docs/react-dom-server.html#gatsby-focus-wrapper"}]},{"type":"paragraph","children":[{"type":"plain","text":"React's API for SSR is "},{"type":"inlineCode","text":"ReactDOMServer.renderToString(element)"},{"type":"plain","text":". Pass the app in JSX format as the element parameter."}]},{"type":"code","lang":"ts","text":"import * as React from \"react\";\nimport * as ReactDOMServer from \"react-dom/server\";\n\nimport { App } from \"../client/App\";\n\nlet htmlBody;\n\ntry {\n  htmlBody = ReactDOMServer.renderToString(<App />);\n} catch (error) {\n  console.error(error);\n}"},{"type":"heading","children":[{"type":"plain","text":"React Helmet"}],"depth":2},{"type":"paragraph","children":[{"type":"link","text":"Document","url":"https://github.com/nfl/react-helmet#server-usage"}]},{"type":"paragraph","children":[{"type":"plain","text":"Helmet's API for SSR is "},{"type":"inlineCode","text":"Helmet.renderStatic()"},{"type":"plain","text":". You have to call it after "},{"type":"inlineCode","text":"ReactDOMServer.renderToString"},{"type":"plain","text":"."}]},{"type":"code","lang":"ts","text":"import { Helmet } from \"react-helmet\";\n\nlet htmlBody;\nlet helmet;\n\ntry {\n  htmlBody = ReactDOMServer.renderToString(<App />);\n  helmet = Helmet.renderStatic();\n} catch (error) {\n  console.error(error);\n}"},{"type":"heading","children":[{"type":"plain","text":"React Router DOM"}],"depth":2},{"type":"paragraph","children":[{"type":"link","text":"Document","url":"https://reactrouter.com/web/guides/server-rendering"}]},{"type":"paragraph","children":[{"type":"plain","text":"Wrap the app with a "},{"type":"inlineCode","text":"StaticRouter"},{"type":"plain","text":"."}]},{"type":"code","lang":"ts","text":"import { StaticRouter } from \"react-router-dom\";\n\nlet htmlBody;\nlet context;\n\napp.get(\"*\", (req: Express.Request, res: Express.Response) => {\n\ttry {\n\t\thtmlBody = ReactDOMServer.renderToString(\n\t\t\t<StaticRouter location={req.url} context={context}>\n\t\t\t\t<App />\n\t\t\t</StaticRouter>\n\t\t);\n\t} catch(error) {\n\t\tconsole.error(error);\n\t}\n};"},{"type":"heading","children":[{"type":"plain","text":"styled-components"}],"depth":2},{"type":"paragraph","children":[{"type":"link","text":"Document","url":"https://styled-components.com/docs/advanced#server-side-rendering"}]},{"type":"paragraph","children":[{"type":"plain","text":"Use "},{"type":"inlineCode","text":"sheet.collectStyles"},{"type":"plain","text":" to wrap the app, then use "},{"type":"inlineCode","text":"sheet.getStyleTags"},{"type":"plain","text":" to collect all of the app's styles."}]},{"type":"paragraph","children":[{"type":"plain","text":"Finally, pass the styles into the HTML's head."}]},{"type":"code","lang":"ts","text":"import { ServerStyleSheet } from \"styled-components\";\n\nconst sheet = new ServerStyleSheet();\nlet htmlBody = \"\";\nlet styleTags = \"\";\n\ntry {\n  htmlBody = ReactDOMServer.renderToString(sheet.collectStyles(<App />));\n  styleTags = sheet.getStyleTags();\n} catch (error) {\n  console.error(error);\n} finally {\n  sheet.seal();\n}"},{"type":"heading","children":[{"type":"plain","text":"Redux"}],"depth":2},{"type":"paragraph","children":[{"type":"link","text":"Document","url":"https://redux.js.org/recipes/server-rendering"}]},{"type":"paragraph","children":[{"type":"plain","text":"Redux's SSR setup is the most complex one. The contents of the store have to be prepared and passed to the HTML during the request."}]},{"type":"paragraph","children":[{"type":"plain","text":"The way to prepare the store is different for each application. For my blog, I fetch the post or the post list data for the respective request URL, then convert the data to the store type."}]},{"type":"paragraph","children":[{"type":"plain","text":"Once the store is prepared, wrap the app with a "},{"type":"inlineCode","text":"Provider"},{"type":"plain","text":", and get the "},{"type":"inlineCode","text":"initialState"},{"type":"plain","text":" with the API Redux provided."}]},{"type":"code","lang":"ts","text":"import { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport { rootReducer, RootState } from \"../client/service/reducer\";\n\napp.get(\"*\", (req: Express.Request, res: Express.Response) => {\n\t// pass request because store is likely dependent on request URL\n\tconst yourStore = yourStoreInitiator(req);\n\tconst preloadedStore: RootState = {\n\t\t// your store state\n\t};\n\n\tlet htmlBody = \"\";\n\tconst store = createStore(rootReducer, preloadedState);\n\n\ttry {\n\t\thtmlBody = ReactDOMServer.renderToString(\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>\n\t\t);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n\n\t// store.getState() returns object so we have to manually stringify it\n\tconst initialState = JSON.stringify(store.getState());\n};"},{"type":"heading","children":[{"type":"plain","text":"HTML handler"}],"depth":2},{"type":"paragraph","children":[{"type":"plain","text":"Since the HTML is frequently edited with several library parts, an isolated handler makes it easier."}]},{"type":"code","lang":"ts","text":"const getFullHTML = (\n  htmlBody: string,\n  styleTags: string,\n  initialState: string,\n  helmet?: HelmetData\n) => {\n  return `\n    <!DOCTYPE html>\n    <html ${helmet?.htmlAttributes.toString()}>\n      <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        ${styleTags}\n        ${helmet?.title.toString()}\n        ${helmet?.meta.toString()}\n        ${helmet?.link.toString()}\n        <style>\n          @import url('<https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@400;700;900&display=swap>');\n          @import url('<https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100;400&display=swap>');\n        </style>\n      </head>\n      <body ${helmet?.bodyAttributes.toString()}>\n        <div id=\"app-root\">${htmlBody}</div>\n        <script>window.__INITIAL_STATE__ = ${initialState}</script>\n        <script defer src=\"main.bundle.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n        <script defer src=\"vendor.bundle.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n      </body>\n    </html>\n  `;\n};"},{"type":"heading","children":[{"type":"plain","text":"Combine each part"}],"depth":2},{"type":"paragraph","children":[{"type":"plain","text":"Finally, combine all of the setups above."}]},{"type":"code","lang":"ts","text":"import * as Express from \"express\";\nimport * as React from \"react\";\nimport * as ReactDOMServer from \"react-dom/server\";\nimport { Helmet, HelmetData } from \"react-helmet\";\nimport { Provider } from \"react-redux\";\nimport { StaticRouter } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { ServerStyleSheet } from \"styled-components\";\n\nimport { App } from \"../client/App\";\nimport { rootReducer, RootState } from \"../client/service/reducer\";\n\nexport const renderer = (\n\treq: Express.Request,\n\tres: Express.Response,\n\tnext: Express.NextFunction,\n) => {\n\tapp.get(\"*\", (req: Express.Request, res: Express.Response) => {\n\tconst yourStore = yourStoreInitiator(req);\n\tconst preloadedStore: RootState = { /* your state */ };\n\n\tlet htmlBody = \"\";\n\tconst context = {};\n  const sheet = new ServerStyleSheet();\n  let styleTags = \"\";\n\tconst store = createStore(rootReducer, preloadedState);\n\tlet helmet;\n\n\ttry {\n\t  htmlBody = ReactDOMServer.renderToString(\n      sheet.collectStyles(\n        <Provider store={store}>\n\t        <StaticRouter location={req.url} context={context}>\n            <App />\n\t        </StaticRouter>\n        </Provider>\n      )\n    );\n    helmet = Helmet.renderStatic();\n    styleTags = sheet.getStyleTags();\n  } catch (error) {\n    console.error(error);\n  } finally {\n    sheet.seal();\n  }\n  const initialState = JSON.stringify(store.getState());\n\n  const fullHTML = getFullHTML(htmlBody, styleTags, initialState, helmet);\n\tres.send(fullHTML);\n};"},{"type":"paragraph","children":[{"type":"plain","text":"You can use "},{"type":"inlineCode","text":"curl -X GET localhost:3000"},{"type":"plain","text":" to check if the express server is returning the whole app in the first easily."}]}],"postMetadata":{"id":"refactor-blog-2-ssr","title":"Refactor Blog: (2) SSR","description":"After the Webpack setup for this site, I also implemented server-side-rendering from scratch.","category":"retrospective","topic":"web development","tags":[],"publishDate":"2021-03-26","pathname":"refactor-blog-2-ssr"},"last5posts":[{"id":"observation-on-programming-with-ai","title":"Observation on Programming with AI","description":"I reckoned getting familiar with AI coding tools is necessary, tried some, and to my surprise, I turned out to be quite optimistic.","category":"essay","topic":"programming","tags":[],"publishDate":"2025-03-13","pathname":"observation-on-programming-with-ai"},{"id":"blogging-and-digital-gardening","title":"Blogging and Digital Gardening in the Social Platform and Generative AI Era","description":"I talk to myself about why bother writing at somewhere nobody comes.","category":"essay","topic":"life","tags":[],"publishDate":"2025-02-11","pathname":"blogging-and-digital-gardening"},{"id":"a-redemption-three-years-later","title":"A Redemption Three Years Later","description":"CD PROJEKT RED made a promise about Night City, which they broke. Three years later they had another attempt, and to me, it was their redemption.","category":"review","topic":"gaming","tags":[],"publishDate":"2025-01-13","pathname":"a-redemption-three-years-later"},{"id":"s14-recap","title":"S14 Recap","description":"I did not play a lot of league during 2024, but I had a few unforgettable moments nonetheless.","category":"retrospective","topic":"gaming","tags":[],"publishDate":"2025-01-07","pathname":"s14-recap"},{"id":"thoughts-on-building-a-game-with-xstate","title":"Thoughts on Building a Game with XState","description":"After hearing about XState's good reputation for years, I used it to build the prototype for my game. These are my thoughts.","category":"note","topic":"game development","tags":[],"publishDate":"2025-01-04","pathname":"thoughts-on-building-a-game-with-xstate"}],"categoryPosts":[{"id":"s14-recap","title":"S14 Recap","description":"I did not play a lot of league during 2024, but I had a few unforgettable moments nonetheless.","category":"retrospective","topic":"gaming","tags":[],"publishDate":"2025-01-07","pathname":"s14-recap"},{"id":"site-patch-notes-2024-redesign","title":"Site Patch Notes: 2024 Redesign","description":"The 2024 redesign is finally here! I went on a journey of learning editorial design, and did an overhaul to this site's design, both functionality-wise and visual-wise.","category":"retrospective","topic":"meta","tags":[],"publishDate":"2024-08-18","pathname":"site-patch-notes-2024-redesign"},{"id":"4-years-reflection","title":"4 Years Reflection","description":"Another two years of life as a full-time developer has passed. Many things changed and many lessons learned. It's a perfect timing to look back and reflect.","category":"retrospective","topic":"career","tags":[],"publishDate":"2024-04-08","pathname":"4-years-reflection"},{"id":"s13-recap","title":"S13 Recap","description":"After a three years gap, I'm back to league.","category":"retrospective","topic":"gaming","tags":[],"publishDate":"2024-01-23","pathname":"s13-recap"},{"id":"refactor-blog-2023-markdown-based-content","title":"Refactor Blog 2023: Markdown Based Content","description":"Embracing a different approach toward my own data, I made a change to the content hosting method of my blog.","category":"retrospective","topic":"meta","tags":[],"publishDate":"2023-06-19","pathname":"refactor-blog-2023-markdown-based-content"}],"categories":[{"name":"essay","count":13},{"name":"review","count":15},{"name":"retrospective","count":15},{"name":"note","count":9},{"name":"research","count":3}]},"__N_SSG":true}